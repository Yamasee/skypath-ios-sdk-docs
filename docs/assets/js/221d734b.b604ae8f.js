"use strict";(self.webpackChunkskypath_ios_sdk=self.webpackChunkskypath_ios_sdk||[]).push([[7249],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>y});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(a),h=r,y=u["".concat(l,".").concat(h)]||u[h]||p[h]||o;return a?n.createElement(y,s(s({ref:t},d),{},{components:a})):n.createElement(y,s({ref:t},d))}));function y(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},5816:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:10},s="Nowcasting",i={unversionedId:"Advanced/Nowcast",id:"version-2.2.0/Advanced/Nowcast",title:"Nowcasting",description:"Overview",source:"@site/versioned_docs/version-2.2.0/Advanced/Nowcast.md",sourceDirName:"Advanced",slug:"/Advanced/Nowcast",permalink:"/skypath-ios-sdk-docs/docs/Advanced/Nowcast",draft:!1,tags:[],version:"2.2.0",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Notifications",permalink:"/skypath-ios-sdk-docs/docs/Advanced/Alerts"},next:{title:"Live Flights",permalink:"/skypath-ios-sdk-docs/docs/Advanced/LiveFlights"}},l={},c=[{value:"Overview",id:"overview",level:3},{value:"Setup in DataQuery",id:"setup-in-dataquery",level:3},{value:"Query",id:"query",level:3}],d={toc:c},u="wrapper";function p(e){let{components:t,...o}=e;return(0,r.kt)(u,(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"nowcasting"},"Nowcasting"),(0,r.kt)("h3",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Nowcasting (aka Nowcast) is turbulence prediction data issued by the SkyPath."),(0,r.kt)("p",null,"Nowcast data is issued hourly for up to 6 hours forecast. "),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://h3geo.org/docs/core-library/restable"},"H3 resolution")," 5 is used by SkyPath for the nowcast area.\nEach nowcast item covers ~252.9 square km hexagon area (as per the H3 resolutions table) and 1000 feet of altitude.\nEach hexagon is connected to the other so this allows for covering the area better.\nSo one nowcast item covers for example FL370..<FL380 or FL380..<FL390."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Nowcast",src:a(3340).Z+"#gh-light-mode-only",width:"1915",height:"440"}),(0,r.kt)("img",{alt:"Nowcast",src:a(2808).Z+"#gh-dark-mode-only",width:"1915",height:"440"})),(0,r.kt)("h3",{id:"setup-in-dataquery"},"Setup in DataQuery"),(0,r.kt)("p",null,"By default, the nowcast data fetch is disabled. It should be included in the ",(0,r.kt)("inlineCode",{parentName:"p"},"DataQuery.types")," list:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"SkyPath.shared.dataQuery.types = [.turbulence, .nowcast]\n")),(0,r.kt)("p",null,"Or using a ",(0,r.kt)("inlineCode",{parentName:"p"},"DataTypeOptions.set(type:enabled:)")," function :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"SkyPath.shared.dataQuery.types.set(type: .nowcast, enabled: true)\n")),(0,r.kt)("p",null,"It can be enabled or disabled at any time. "),(0,r.kt)("p",null,"When enabled, nowcast will be fetched from the server hourly. Fetched data will be stored on disk and will be available offline."),(0,r.kt)("p",null,"Nowcast data will be fetched for areas set in ",(0,r.kt)("inlineCode",{parentName:"p"},"DataQuery.polygon")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"DataQuery.viewport"),", similar to the turbulence fetch flow. "),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"SkyPathDelegate.didReceiveNewNowcast()")," delegate function will be called when the SDK has fetched new nowcast data from the server."),(0,r.kt)("h3",{id:"query"},"Query"),(0,r.kt)("p",null,"Get nowcast data using a query locally cached on disk data without making a server request."),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"NowcastQuery")," to get filtered data as a GeoJSON string or as an array of objects."),(0,r.kt)("p",null,"It blocks the current thread, so using a separate background thread is recommended."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"var query = NowcastQuery(\n    hours: .now,\n    altRange: altRange,\n    resultOptions: .geoJSON)\nquery.polygon = polygon\n\ndo {\n    let result = try SkyPath.shared.nowcast(with: query).get()\n    let geoJSON = result.geoJSON\n    // Show geoJSON on the map\n} catch {\n    print(error)\n}\n")))}p.isMDXComponent=!0},2808:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/nowcast_dark-af1641be6da329b428f63f782450c051.jpg"},3340:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/nowcast_light-2b5361f5a397dae5f1058473e4c4a53e.jpg"}}]);