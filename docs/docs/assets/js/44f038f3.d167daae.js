"use strict";(self.webpackChunkskypath_ios_sdk=self.webpackChunkskypath_ios_sdk||[]).push([[849],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>k});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),d=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=d(r),h=n,k=p["".concat(s,".").concat(h)]||p[h]||c[h]||i;return r?a.createElement(k,l(l({ref:t},u),{},{components:r})):a.createElement(k,l({ref:t},u))}));function k(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:n,l[1]=o;for(var d=2;d<i;d++)l[d]=r[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}h.displayName="MDXCreateElement"},8505:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=r(7462),n=(r(7294),r(3905));const i={sidebar_position:3},l="Quick Start",o={unversionedId:"Quick Start",id:"version-2.0.17/Quick Start",title:"Quick Start",description:"Before you begin, ensure you have Installed the SkyPath iOS SDK.",source:"@site/versioned_docs/version-2.0.17/Quick Start.md",sourceDirName:".",slug:"/Quick Start",permalink:"/skypath-ios-sdk-docs/Quick Start",draft:!1,tags:[],version:"2.0.17",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Install",permalink:"/skypath-ios-sdk-docs/Install"},next:{title:"Data",permalink:"/skypath-ios-sdk-docs/Data"}},s={},d=[{value:"1. Import SkyPathSDK",id:"1-import-skypathsdk",level:3},{value:"2. Set Delegate",id:"2-set-delegate",level:3},{value:"2. Start SDK",id:"2-start-sdk",level:3},{value:"3. Setup Aircraft",id:"3-setup-aircraft",level:3},{value:"4. Set Viewport",id:"4-set-viewport",level:3},{value:"4. Get Turbulence",id:"4-get-turbulence",level:3},{value:"5. Set Flight",id:"5-set-flight",level:3},{value:"6. Test",id:"6-test",level:3}],u={toc:d},p="wrapper";function c(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"quick-start"},"Quick Start"),(0,n.kt)("p",null,"Before you begin, ensure you have ",(0,n.kt)("a",{parentName:"p",href:"/skypath-ios-sdk-docs/Install"},"Installed the SkyPath iOS SDK"),"."),(0,n.kt)("h3",{id:"1-import-skypathsdk"},"1. Import SkyPathSDK"),(0,n.kt)("p",null,"Near the top of any Swift file that uses SkyPathSDK, add the following import statement:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-swift"},"import SkyPathSDK\n")),(0,n.kt)("h3",{id:"2-set-delegate"},"2. Set Delegate"),(0,n.kt)("p",null,"Set your ",(0,n.kt)("inlineCode",{parentName:"p"},"SkyPathDelegate")," object. All methods will be called on the main thread."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-swift"},"SkyPath.shared.delegate = delegate\n")),(0,n.kt)("p",null,"Implement the ",(0,n.kt)("inlineCode",{parentName:"p"},"SkyPathDelegate")," protocol required methods."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-swift"},'extension Controller: SkyPathDelegate {\n\n    func didUpdateRecordingStatus(to recording: Bool) {\n        \n        print("SkyPath did \\(recording ? "start" : "stop") recording")\n    }\n    \n    func didReceiveNewTurbulenceData() {\n    \n        print("SkyPath did receive new turbulence data")\n        \n        // Query turbulence using `TurbulenceQuery` and show on the map\n        // See "Get Turbulence" step of this guide\n    }\n    \n    func didChangeDevicePosition(_ inPosition: Bool, horizontal: Bool) {\n    \n        print("SkyPath device is \\(inPosition ? "" : "not ")in position and \\(horizontal ? "" : "not ")horizontal")\n                \n        // Turbulence data is not tracked when device in not in position or is horizontal. \n        // Show a notice here to properly position the device in the cradle.\n    }\n}\n')),(0,n.kt)("p",null,"These are required to implement the methods of the delegate and are enough for a quick start. You can get more details in the corresponding documentation sections."),(0,n.kt)("h3",{id:"2-start-sdk"},"2. Start SDK"),(0,n.kt)("p",null,"Start SDK. It will not track and provide data until started."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-swift"},'SkyPath.shared.start(apiKey: "API_KEY", airline: "ICAO", userId: "ID", env: .dev(serverUrl: nil)) { error in\n    if let error = error {\n        print(error)\n    }\n}\n')),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"API_KEY")," is provided to you by SkyPath."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"ICAO")," is a company ICAO code registered in SkyPath system."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"ID")," is any user identifier unique per company. Does not need to be registered in the SkyPath system."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},".dev(serverUrl: nil)")," is set to use a default SkyPath development server ",(0,n.kt)("inlineCode",{parentName:"li"},"dev-api.skypath.io"),".")),(0,n.kt)("p",null,"The completion block will be called asynchronously on the main thread. ",(0,n.kt)("inlineCode",{parentName:"p"},"error")," will have details in case SDK can't start. If all is good ",(0,n.kt)("inlineCode",{parentName:"p"},"SkyPathDelegate.didUpdateRecordingStatus(to:)")," will be called with ",(0,n.kt)("inlineCode",{parentName:"p"},"recording: true"),"."),(0,n.kt)("h3",{id:"3-setup-aircraft"},"3. Setup Aircraft"),(0,n.kt)("p",null,"The turbulence severity level can be different for different aircraft types."),(0,n.kt)("p",null,"Set a current a/c type using supported types from the SDK after it started."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-swift"},'if let aircraft = SkyPath.shared.aircraft(byId: "B737") {\n    SkyPath.shared.aircraft = aircraft\n}\n')),(0,n.kt)("h3",{id:"4-set-viewport"},"4. Set Viewport"),(0,n.kt)("p",null,"After SDK started and the aircraft was set, set a fixed US viewport to get data in. Later it needs to be changed to a dynamic visible viewport on the map. Also, a route corridor will be set. For now, just a quick viewport to test."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-swift"},"let testUSBbox = [(45, -124), (45, -70), (33, -76), (32, -120), (45, -124)].map {\n    CLLocationCoordinate2D(latitude: $0.0, longitude: $0.1)\n}\nSkyPath.shared.dataQuery.viewport = testUSBbox\n")),(0,n.kt)("h3",{id:"4-get-turbulence"},"4. Get Turbulence"),(0,n.kt)("p",null,"SDK fetches data from the server and caches it locally automatically."),(0,n.kt)("p",null,"Use ",(0,n.kt)("inlineCode",{parentName:"p"},"TurbulenceQuery")," to get filtered data as a GeoJSON string or as an array of objects. It will query locally cached data received previously. It blocks the current thread, so using a separate background thread is recommended."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-swift"},"let result = SkyPath.shared.turbulence(with: TurbulenceQuery())\nswitch result {\ncase .success(let turbResult):\n    let geoJSON = turbResult.geoJSON\n    // Show GeoJSON on the map\ncase .failure(let error):\n    print(error)\n}\n")),(0,n.kt)("h3",{id:"5-set-flight"},"5. Set Flight"),(0,n.kt)("p",null,"To track data, flight info is required. You can still get turbulence data without setting it."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-swift"},'let flight = Flight(dep: "ICAO", dest: "ICAO", fnum: "FLIGHT_NUMBER")\nSkyPath.shared.startFlight(flight)\n')),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"ICAO")," is the airport's ICAO code."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"FLIGHT_NUMBER")," is a combination of the airline's ICAO code and 1-4 digit number. When there is no such number, use ORIG-DEST-GUID, where ORIG is the ICAO code of the departure airport, DEST is the ICAO code of the destination airport and GUID is a globally unique identifier.")),(0,n.kt)("p",null,"To stop tracking data, typically when a flight is ended, remove the flight."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-swift"},"SkyPath.shared.endFlight()\n")),(0,n.kt)("h3",{id:"6-test"},"6. Test"),(0,n.kt)("p",null,"After completing the above steps run the project and see if the data is provided correctly. You should see some turbulence data. See ",(0,n.kt)("a",{parentName:"p",href:"/skypath-ios-sdk-docs/Test"},"Test")," for how to test recording."))}c.isMDXComponent=!0}}]);